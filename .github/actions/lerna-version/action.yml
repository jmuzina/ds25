name: Version packages
description: Updates package version numbers and changelogs for changed packages.
inputs:
  release_type:
    description: "Prerelease identifier"
    required: true
outputs:
  VERSION:
    description: "The new latest version number across all packages"
    value: ${{ steps.lerna_version.outputs.VERSION }}
runs:
  using: composite
  steps:
    - name: Version packages
      shell: bash
      id: lerna_version
      run: |
        OLD_VERSION=$(jq -r '.version' lerna.json)
        
        # If a stable prerelease identifier is given, graduate the version to stable
        if [ "${{ inputs.release_type }}" == "stable" ]; then
          VERSION_ARGS="--conventional-graduate"
        # Add the prerelease identifier and signal lerna to bump pre-release version instead of the main version
        # For example, if release_type is "experimental" and cur version is 0.0.1-experimental.0, bump to 0.0.1-experimental.1 instead of 0.0.1
        else
          VERSION_ARGS="--preid ${{ inputs.release_type }} --conventional-prerelease"
        fi

        # Run lerna version with the specified arguments
        # Do not commit or tag as we need to re-format the package files before committing
        bun run lerna version --conventional-commits $VERSION_ARGS --no-git-tag-version --no-push --yes
        
        NEW_VERSION=$(jq -r '.version' lerna.json)
        
        if [ $OLD_VERSION == $NEW_VERSION ]; then
          echo "No version changes detected. Exiting."
          exit 1
        # Protect against unexpected major version bumps during project initialization
        # TODO this should be removed after 1.0.0 is released, so that we can release pre-releases of major versions like 2.0.0-rc-0.
        elif [ "${{ inputs.release_type }}" != "stable" ]; then
          OLD_MAJOR=$(echo "$OLD_VERSION" | cut -d. -f1)
          NEW_MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)
          if [ $NEW_MAJOR -ne $OLD_MAJOR ]; then
            echo "Unexpected major version bump detected. Exiting."
            exit 1
          fi
        fi
        
        echo "VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # Lerna may introuce slight formatting changes to the package.json files.
    - name: Apply formatting fixes
      shell: bash
      run: bun run check:fix

    - name: Setup Git CLI
      uses: ./.github/actions/setup-git
      with:
        name: ${{ github.actor }}

    - name: Commit and tag v${{ steps.lerna_version.outputs.VERSION }}
      shell: bash
      run: |
        git add .
        git commit -m "chore: version bump to ${{ steps.lerna_version.outputs.VERSION }}"
        # Create an annotated tag (`-m`) so that lerna can use it to determine which packages have changed
        # See https://github.com/lerna/lerna/issues/1357#issuecomment-438162152
        git tag "v${{ steps.lerna_version.outputs.VERSION }}" -m "v${{ steps.lerna_version.outputs.VERSION }}"
        git push && git push --tags